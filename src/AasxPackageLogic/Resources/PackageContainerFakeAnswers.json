{
  "Http": [
    // All AAS
    {
      "Request": "https://cloudrepo.aas-voyager.com/shells",
      "Response": "eyJyZXN1bHQiOlt7ImlkU2hvcnQiOiJteUFBU3dpdGhHbG9iYWxTZWN1cml0eU1ldGFNb2RlbCIsImlkIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvYWFzLzY1NDNfNjAzMl8zMDEyXzU5NzMiLCJhc3NldEluZm9ybWF0aW9uIjp7ImFzc2V0S2luZCI6Ikluc3RhbmNlIiwiZ2xvYmFsQXNzZXRJZCI6Ind3dy5jb21wYW55LmNvbS9pZHMvYXNzZXQvMDE2NF85MDIyXzExOTFfNzM2MiJ9LCJzdWJtb2RlbHMiOlt7InR5cGUiOiJNb2RlbFJlZmVyZW5jZSIsImtleXMiOlt7InR5cGUiOiJTdWJtb2RlbCIsInZhbHVlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vMjAxNV82MDIwXzMwMTJfMDU4NSJ9XX0seyJ0eXBlIjoiTW9kZWxSZWZlcmVuY2UiLCJrZXlzIjpbeyJ0eXBlIjoiU3VibW9kZWwiLCJ2YWx1ZSI6Imh0dHBzOi8vZXhhbXBsZS5jb20vaWRzL3NtLzU0MzFfMjE4MV8zMDEyXzM5MjkifV19XSwibW9kZWxUeXBlIjoiQXNzZXRBZG1pbmlzdHJhdGlvblNoZWxsIn0seyJpZFNob3J0IjoiUkVHSVNUUlkiLCJpZCI6IkFzc2V0QWRtaW5pc3RyYXRpb25TaGVsbC0tLTAxMkY0NkFGIiwiYXNzZXRJbmZvcm1hdGlvbiI6eyJhc3NldEtpbmQiOiJJbnN0YW5jZSIsImdsb2JhbEFzc2V0SWQiOiJBc3NldC0tLTA2QTlGRTRGIn0sInN1Ym1vZGVscyI6W3sidHlwZSI6Ik1vZGVsUmVmZXJlbmNlIiwia2V5cyI6W3sidHlwZSI6IlN1Ym1vZGVsIiwidmFsdWUiOiJodHRwczovL2V4YW1wbGUuY29tL2lkcy9zbS84MjAyXzYwMTFfMzAyMl8xNjIwIn1dfSx7InR5cGUiOiJNb2RlbFJlZmVyZW5jZSIsImtleXMiOlt7InR5cGUiOiJTdWJtb2RlbCIsInZhbHVlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vMDE1NF85MDkyXzExMjJfMjIyMCJ9XX1dLCJtb2RlbFR5cGUiOiJBc3NldEFkbWluaXN0cmF0aW9uU2hlbGwifV0sInBhZ2luZ19tZXRhZGF0YSI6e319"
    },
    // Single AAS
    {
      "Request": "https://cloudrepo.aas-voyager.com/shells/aHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvYWFzLzY1NDNfNjAzMl8zMDEyXzU5NzM=",
      "Response": "eyJpZFNob3J0IjoibXlBQVN3aXRoR2xvYmFsU2VjdXJpdHlNZXRhTW9kZWwiLCJpZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20vaWRzL2Fhcy82NTQzXzYwMzJfMzAxMl81OTczIiwiYXNzZXRJbmZvcm1hdGlvbiI6eyJhc3NldEtpbmQiOiJJbnN0YW5jZSIsImdsb2JhbEFzc2V0SWQiOiJ3d3cuY29tcGFueS5jb20vaWRzL2Fzc2V0LzAxNjRfOTAyMl8xMTkxXzczNjIifSwic3VibW9kZWxzIjpbeyJ0eXBlIjoiTW9kZWxSZWZlcmVuY2UiLCJrZXlzIjpbeyJ0eXBlIjoiU3VibW9kZWwiLCJ2YWx1ZSI6Imh0dHBzOi8vZXhhbXBsZS5jb20vaWRzL3NtLzIwMTVfNjAyMF8zMDEyXzA1ODUifV19LHsidHlwZSI6Ik1vZGVsUmVmZXJlbmNlIiwia2V5cyI6W3sidHlwZSI6IlN1Ym1vZGVsIiwidmFsdWUiOiJodHRwczovL2V4YW1wbGUuY29tL2lkcy9zbS81NDMxXzIxODFfMzAxMl8zOTI5In1dfV0sIm1vZGVsVHlwZSI6IkFzc2V0QWRtaW5pc3RyYXRpb25TaGVsbCJ9"
    },
    // Single Submodel
    {
      "Request": "https://cloudrepo.aas-voyager.com/submodels/aHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vMjAxNV82MDIwXzMwMTJfMDU4NQ==",
      "Response": ""
    }
  ]
}