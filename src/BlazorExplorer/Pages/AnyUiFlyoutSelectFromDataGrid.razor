@page "/AnyUiFlyoutSelectFromDataGrid"
@using AnyUi
@using BlazorUI.Data
@inject BlazorUI.Data.AASService SubmodelService
@inject BlazorUI.Data.BlazorSession bi

@if (EventSession != null && DialogueData is AnyUiDialogueDataSelectFromDataGrid ddsfl)
{
	@* see Modal.razor: Bootstrap inner dialog classes *@

	int numItems = 2;
	if (ddsfl.Rows != null && ddsfl.Rows.Count >= 2)
		numItems = (150 * ddsfl.Rows.Count) / 100;

	<div class="modal-header">
		<h3 class="modal-title" id="exampleModalLongTitle">@ddsfl.Caption</h3>
		<button type="button" class="close btn btn-backdrop" aria-label="Close"
				@onclick="() => LeaveResult(false)">
			<span aria-hidden="true">&times;</span>
		</button>
	</div>
	<div class="modal-body">
		<form>
			<span @ondblclick="@DblHandler">
				<select class="form-control selectpicker" multiple data-max-options="2"
						style="height:@(numItems)rem; max-height: 60vh;"
						aria-label="multiple select example" @onchange="@OnSelect">

					@if (ddsfl.Rows != null)
						for (int i = 0; i < ddsfl.Rows.Count; i++)
						{
							<option value="@(i)">@(ddsfl.Rows[i].Cells[0])</option>
						}

				</select>
			</span>
		</form>
	</div>
	<div class="modal-footer">

		@if (ddsfl.AlternativeSelectButtons == null || ddsfl.AlternativeSelectButtons.Length < 1)
		{
			<button type="button" class="btn btn-primary-light btn-lg" @onclick="() => LeaveResult(true, 0)">OK</button>
		}
		else
		{
			for (int bi = 0; bi < ddsfl.AlternativeSelectButtons.Length; bi++)
			{
				var title = ddsfl.AlternativeSelectButtons[bi];
				<button type="button" class="btn btn-primary-light btn-lg" @onclick="() => LeaveResult(true, bi)">@title</button>
			}
		}

	</div>
}

@code {
	[Parameter]
	public AnyUiHtmlEventSession EventSession { get; set; }

	[Parameter]
	public AnyUiDialogueDataBase DialogueData { get; set; }

	void OnSelect(ChangeEventArgs e)
	{
		if (DialogueData is AnyUiDialogueDataSelectFromDataGrid ddsfl
			&& e.Value is string[] varr
			&& varr.Length > 0
			&& int.TryParse(varr[0], out int i)
				&& ddsfl.Rows != null
				&& i >= 0 && i < ddsfl.Rows.Count)
		{
			ddsfl.Result = true;
			ddsfl.ResultIndex = i;
			ddsfl.ResultItem = ddsfl.Rows[i];
		}
	}

	void DblHandler(MouseEventArgs e)
	{
		if (DialogueData is AnyUiDialogueDataSelectFromDataGrid ddsfl
			&& ddsfl.AlternativeSelectButtons != null
			&& ddsfl.AlternativeSelectButtons.Length > 0)
			return;

		LeaveResult(true, 0);
	}

	public void LeaveResult(bool result, int buttonIndex)
	{
		if (DialogueData is AnyUiDialogueDataSelectFromDataGrid ddsfl)
		{
			ddsfl.ButtonIndex = buttonIndex;
		}
		
		EventSession?.EndModal(result);
	}
}
